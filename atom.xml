<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[J955技术博客]]></title>
  <subtitle><![CDATA[J955技术博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.j955.net//"/>
  <updated>2015-07-28T08:11:11.000Z</updated>
  <id>http://blog.j955.net//</id>
  
  <author>
    <name><![CDATA[J955]]></name>
    <email><![CDATA[j955jason@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[为什么千万不要重写代码？]]></title>
    <link href="http://blog.j955.net/2015/07/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%87%8D%E5%86%99%E4%BB%A3%E7%A0%81%EF%BC%9F/"/>
    <id>http://blog.j955.net/2015/07/27/为什么千万不要重写代码？/</id>
    <published>2015-07-27T15:07:23.000Z</published>
    <updated>2015-07-28T08:11:11.000Z</updated>
    <content type="html"><![CDATA[<p>转载自: <a href="http://mp.weixin.qq.com/s?__biz=MjM5NzQ3ODAwMQ==&amp;mid=212512928&amp;idx=1&amp;sn=545f5845333983f1542c8bb1cd044244#rd" target="_blank" rel="external">地址</a><br>微信看到的一篇文章,比较认同</p>
<blockquote>
<p>程序员都有一颗工程师的心，所以当他们到一片新的场地想做的第一件事就是，将旧的一切推倒重来。是的，他们决不会满足于简单的增量劳动。</p>
</blockquote>
<p>或许这种微妙的心理定位可以解释：为什么程序员进入新项目组后宁愿丢掉旧代码重新写，也不愿意修修补补。他们认为旧代码简直一团糟。</p>
<p>但是，事实上真是这样吗？你之所以认为旧代码一团糟，其实是由编程的一个基本定律决定的，那就是：写代码容易，读代码难。</p>
<blockquote>
<p>为什么你觉得旧代码异常混乱？因为读代码更难。</p>
</blockquote>
<p>这大概就是代码Reuse难以实现的原因。 这就是你组里的每个人都喜欢用不同的功能将分割的字符串转换成一个数组。比起猜测旧的功能是怎样实现的，重新写一个自己的功能要简单和有趣多了。</p>
<p>作为这个公理的推论，你可以问问身边的程序员他们正在奋战的代码怎么样？「简直是一塌糊涂！」他们肯定会这样说。「我简直想推倒重来！」</p>
<p>为什么认为代码这么糟糕呢？「额，看看这个功能，竟然有两页长！完全不知道这些东西为什么在这里！完全不知道这些API是干什么的。」他们会这样回答你。</p>
<p>（漫画：读别人的代码是一种怎样的体验？）</p>
<p>曾经，Borland的创始人 Philippe Kahn当初就是向记者们吹嘘：Quattro Pro会比Microsoft Excel要好用得多，因为它是从头开始编写的，全部都是新的源代码！</p>
<p>但是，认为新代码比旧代码好简直就是荒谬。旧代码是已经运行过的，测试过的。无数的bug在被发现前都上线运行过，发现之后程序员们可能在花了好些日子才修复了这些bug。这种修复可能是一行代码，也可能是几个字符，无数的时间和精力都花在了这些bug修复上。</p>
<p>当你决定抛弃这些旧代码从零开始的时候，你也丢掉全部前任努力的结果。</p>
<blockquote>
<p>新代码一定比旧代买好？NO，重写可能会带来更大的风险。</p>
</blockquote>
<p>对技术领导者来说，重写项目的代码也是一个异常艰难的决定。因为从公司层面说，重现代码甚至会威胁产品的市场竞争力。一旦决定重写代码，那么与竞品相比，你可能落后了2~3年——在软件行业，这时间可够长的。</p>
<p>你理想中的新代码会带来产品功能的提升▼</p>
<p>但事实上，即便重写的新代码可以实现旧代码的所有功能和需求，但是为产品带来的市场竞争力只有边际提升。因为重写用的新技术、新语言、新框架并没有给产品带来质的飞跃。</p>
<p>更不用说在重写的漫长过程中可能会遇到一些意外情况，比如：</p>
<p>1、缺钱：资金链的断裂▼</p>
<p>2、缺人：核心程序员离职</p>
<p>最终导致效果不佳：达不到原产品应有的所有功能和需求，白白浪费了时间和金钱，也丢掉了市场竞争力。▼</p>
<p>所以重写代码意味着，你在把自己置身于非常危险的境地，可能几年后你也写不出比以前更好的代码。你只是花了一大笔钱把已经存在的代码又写了一遍。</p>
<blockquote>
<p>当你觉得眼前的旧代码很烂时，该怎么办？</p>
</blockquote>
<p>你觉得旧代码写的很烂，那又怎样呢？它们已经上线，已经在实际运行中经受住了考验。所以当你发现前任留下的代码乱七八糟的时候，不妨冷静下来，从以下三个方面入手理解代码、改善代码：</p>
<p>1、代码的结构有问题</p>
<p>如果一段网络代码突然弹出了自己的对话框，应该是UI代码需要被处理。这些问题可以被解决掉，你要一次次小心地移动代码，重构，改变接口。还需要一位细心的工程师立马仔细地检查这些改变是否有问题，从而不打扰到其他人。事实上，甚至比较大的结构变化也可以不扔掉代码来完成。</p>
<p>大牛程序员Joel Spolsky回忆说，曾经在某个项目中，他和他的团队花了好几个月重新架构在一点上：把代码动来动去、清理、创建有意义的基类，并创建了模块之间的完美接口。但是他们始终非常小心翼翼，并没有产生新的bug、也没有丢掉任何旧代码。</p>
<p>2、代码的效率不高</p>
<p>曾经，Netscape的渲染代码被传非常缓慢。但事实上，这只会影响该项目的一小部分，这部分是你可以优化甚至重写的。你完全不必重写全部代码。优化速度的1％工作量，会让你获得99％的爆炸性提高。</p>
<p>3、代码写得很丑</p>
<p>有些代码真的写的很丑，比如Joel曾参与一个项目，开始用下划线做开始的成员变量约定，但后来改用更标准的「M<em>」。所以一半的功能用「</em>」开始，一半用「M」开始，这看起来真的很丑陋。但这个问题5分钟就能解决，而不用从头开始写全部的代码。</p>
<p>最后，你要记住，从头开始再写一遍并不意味着你会写出比以前更好的代码。因为你没有参与到上一个版本的创建，所以你其实根本就不算有经验。一旦你准备推倒重写，你可能会再犯一遍版本一犯过的错，甚至会产生更多的新问题。</p>
<blockquote>
<p>100offer说：面对糟糕的旧代码，Keep Calm &amp; Carry On !</p>
</blockquote>
<p>在大型商业项目中，推倒重来是非常危险的行为。当然，如果你是在做实验，想到新算法可以随时重写。</p>
<p>如果你跳槽、或刚接手一个新项目，面对看上去异常混乱的旧代码，请冷静下来，忍住推倒重写的冲动，想想上面这些经验之谈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转载自: <a href="http://mp.weixin.qq.com/s?__biz=MjM5NzQ3ODAwMQ==&amp;mid=212512928&amp;idx=1&amp;sn=545f5845333983f1542c8bb1cd044244#rd" ta]]>
    </summary>
    
      <category term="编程心得" scheme="http://blog.j955.net/tags/%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
    
      <category term="转载" scheme="http://blog.j955.net/categories/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="编程心得" scheme="http://blog.j955.net/categories/%E8%BD%AC%E8%BD%BD/%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css居中剪裁图片]]></title>
    <link href="http://blog.j955.net/2015/07/27/css%E5%B1%85%E4%B8%AD%E5%89%AA%E8%A3%81%E5%9B%BE%E7%89%87/"/>
    <id>http://blog.j955.net/2015/07/27/css居中剪裁图片/</id>
    <published>2015-07-27T14:47:26.000Z</published>
    <updated>2015-07-28T08:07:13.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>img{<br>    object-fit:cover<br>     width: 50px;<br>     height: 50px;<br>}</p>
</blockquote>
<p>据说连ie8也支持,这里的width 跟height 必须小于图片原来大小效果才能看出</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>img{<br>    object-fit:cover<br>     width: 50px;<br>     height: 50px;<br>}</p>
</blockquote>
<p>据说连ie8也支持,这里的width 跟height]]>
    </summary>
    
      <category term="CSS" scheme="http://blog.j955.net/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用hexo在github上建blog]]></title>
    <link href="http://blog.j955.net/2015/07/21/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E5%86%99blog/"/>
    <id>http://blog.j955.net/2015/07/21/利用hexo在github上写blog/</id>
    <published>2015-07-21T02:59:33.000Z</published>
    <updated>2015-07-28T08:09:31.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>之前一直好奇很多技术blog都会在github上挂着,最近google了怎样实现也同时挂了自己的blog上去 ^_^<br>大概说说我大概的做法也做下备忘,官网有教程的我就不多说了大家按照教程一步步走就可以了,我这里重点说说hexo怎样配置上github.</p>
<ol>
<li><h1 id="github创建项目">github创建项目</h1>注册github并创建一个项目,注意项目的命名有要求,例如:我的git地址是 <a href="https://github.com/j955" target="_blank" rel="external">https://github.com/j955</a>, 项目命名就是j955.github.io</li>
<li><h1 id="安装hexo">安装hexo</h1><p>市面github建blog的工具不少,我选择的是 hexo <a href="http://j955.github.io/" target="_blank" rel="external">地址</a> 跟着教程走就可以了.<br>安装之后打开_config.yml 这里说说我初步的配置</p>
<p> 2.1 更换模板 <a href="http://hexo.io/themes/" target="_blank" rel="external">地址</a> 我选用的是next</p>
<p> 2.2 配置git<br> (参考下图)<img src="/images/1/1.png" alt="配置config.yml"></p>
<p> 2.3 创建git的ssh-key(重点:这个关乎于你的blog能不能发布上github)</p>
<blockquote>
<p>创建ssh-key (按着提示enter),中间会提示输入密码.这个密码要记住后面会有用<br>提示”Your identification has been saved in /Users/you/.ssh/id_rsa.” 代表成功了 ^o^</p>
<pre><code>2<span class="class">.3</span><span class="class">.1</span> <span class="tag">ssh-keygen</span> <span class="tag">-t</span> <span class="tag">rsa</span> <span class="tag">-C</span> "<span class="tag">your_email</span><span class="at_rule">@<span class="keyword">example.com"</span></span>
</code></pre><p>把生成的key添加到ssh-agent</p>
<pre><code><span class="number">2</span>.<span class="number">3</span>.<span class="number">2</span> ssh-<span class="keyword">add </span>~/.ssh/id_rsa
</code></pre><p>copy key内容</p>
<pre><code><span class="number">2.3</span>.<span class="number">3</span>  pbcopy &lt; ~/.ssh/id_rsa<span class="class">.pub</span> 
</code></pre><p>登录上github对应的blog项目(参考下图)</p>
<pre><code>2<span class="class">.3</span><span class="class">.4</span> 设置<span class="tag">ssh-key</span>
</code></pre><p><img src="/images/1/2.png" alt="设置github ssh-key"><br><img src="/images/1/3.png" alt="设置github ssh-key"></p>
</blockquote>
<p>  2.4 发布上github</p>
<blockquote>
<p>2.4.1 hexo deploy<br>2.4.2 访问github的blog项目地址: j955.github.io</p>
</blockquote>
<p>  2.5 绑定域名 (可选)<br>到2.4 整个设置已经ok了,但如果用户想自定义域名去访问blog.例如: blog.xxx.com或者www.xxx.com还需要设置域名绑定</p>
<blockquote>
<p>2.5.1 在本地blog的项目source 新建cname的文件,然后编辑你对应的域名: blog.xxx.com或者www.xxx.com<br>2.5.2 登录自己的域名指向后台,添加一个新的cname<br><img src="/images/1/4.png" alt="设置github ssh-key"> (注意: j955.github.io. io后面是有个”.”的不要忘记~(≧▽≦)/~啦啦啦)<br>hexo clean<br>hexo generate<br>hexo deploy<br>这样你就可以用自定义的域名访问你github上的blog了</p>
</blockquote>
</li>
</ol>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>之前一直好奇很多技术blog都会在github上挂着,最近google了怎样实现也同时挂了自己的blog上去 ^_^<br>大概说说我大概的做法也做下备忘,官网有教程的我就不多说了大家按照教程一步步走就可以了,我这里重点说说hexo怎样配置上git]]>
    </summary>
    
      <category term="blog" scheme="http://blog.j955.net/tags/blog/"/>
    
      <category term="github" scheme="http://blog.j955.net/tags/github/"/>
    
      <category term="hexo" scheme="http://blog.j955.net/tags/hexo/"/>
    
  </entry>
  
</feed>